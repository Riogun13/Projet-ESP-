import firebase from 'react-native-firebase';

class NotifService {

  constructor() {
    this.lastId = 0;
    this.notifStringId = 'BeauceArtId';
    this.nearSculptureNotifId = 'BeauceArtNotifNearSculpture';
    if(!this.hasPermission()){
      this.requestPermission();
    }
    this.configure();
    //this.configure(onRegister, onNotification);
  }

  configure(){
    this.configureNotificationChannel();
  }

  configureNotificationChannel(){
    // Build a channel
    const channel = new firebase.notifications.Android.Channel('-channel', 'Beauce Art Channel', firebase.notifications.Android.Importance.Max)
    .setDescription('Beauce Art app notification channel');

    // Create the channel
    firebase.notifications().android.createChannel(channel);
  }

  getNewId(){
    this.lastId++;
    return this.notifStringId + this.lastId;
  }

  localNotif(id, title, body, data){
    if(id == null)
      id = this.getNewId();

    if(data == null)
      data = {};

    const notification = new firebase.notifications.Notification()
      .setNotificationId(id)
      .setTitle(title)
      .setBody(body)
      .setData(data);
      
    notification
      .android.setChannelId('channelId')
      .android.setSmallIcon('ic_notification');

      firebase.notifications().displayNotification(notification);

    //On press
    // firebase.notifications().onNotificationOpened((notificationOpen) => {
    //   this.removeDeliveredNotification(notificationOpen.notification.notificationId);
    // });
    
    firebase.notifications().displayNotification(notification)
  }

  removeAllDeliveredNotifications(){
    firebase.notifications().removeAllDeliveredNotifications();
  }

  removeDeliveredNotification(notificationId){
    firebase.notifications().removeDeliveredNotification(notificationId);
  }

  async hasPermission() {
    const enabled = await firebase.messaging().hasPermission();
    return enabled;
  }

  async requestPermission() {
    let answer = true;
    try {
      await firebase.messaging().requestPermission();
      // User has authorised
    } catch (error) {
      // User has rejected permissions
      answer = false;
    }
    return answer;
  }

  // configure(onRegister, onNotification, gcm = "") {
  //   PushNotification.configure({
  //     // (optional) Called when Token is generated (iOS and Android)
  //     onRegister: onRegister, //this._onRegister.bind(this),

  //     // (required) Called when a remote or local notification is opened or received
  //     onNotification: onNotification, //this._onNotification,

  //     // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
  //     senderID: gcm,

  //     // IOS ONLY (optional): default: all - Permissions to register.
  //     permissions: {
  //       alert: true,
  //       badge: true,
  //       sound: true
  //     },

  //     // Should the initial notification be popped automatically
  //     // default: true
  //     popInitialNotification: true,

  //     /**
  //       * (optional) default: true
  //       * - Specified if permissions (ios) and token (android and ios) will requested or not,
  //       * - if not, you must call PushNotificationsHandler.requestPermissions() later
  //       */
  //     requestPermissions: true,
  //   });
  // }

  // localNotif() {
  //   this.lastId++;
  //   PushNotification.localNotification({
  //     /* Android Only Properties */
  //     id: ''+this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  //     ticker: "My Notification Ticker", // (optional)
  //     autoCancel: true, // (optional) default: true
  //     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
  //     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
  //     bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
  //     subText: "This is a subText", // (optional) default: none
  //     color: "red", // (optional) default: system default
  //     vibrate: true, // (optional) default: true
  //     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  //     tag: 'some_tag', // (optional) add tag to message
  //     group: "group", // (optional) add group to message
  //     ongoing: false, // (optional) set whether this is an "ongoing" notification

  //     /* iOS only properties */
  //     alertAction: 'view', // (optional) default: view
  //     category: null, // (optional) default: null
  //     userInfo: null, // (optional) default: null (object containing additional notification data)

  //     /* iOS and Android properties */
  //     title: "Local Notification", // (optional)
  //     message: "My Notification Message", // (required)
  //     playSound: false, // (optional) default: true
  //     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  //     number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  //     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
  //   });
  // }

  // scheduleNotif() {
  //   this.lastId++;
  //   PushNotification.localNotificationSchedule({
  //     date: new Date(Date.now() + (30 * 1000)), // in 30 secs

  //     /* Android Only Properties */
  //     id: ''+this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  //     ticker: "My Notification Ticker", // (optional)
  //     autoCancel: true, // (optional) default: true
  //     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
  //     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
  //     bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
  //     subText: "This is a subText", // (optional) default: none
  //     color: "blue", // (optional) default: system default
  //     vibrate: true, // (optional) default: true
  //     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  //     tag: 'some_tag', // (optional) add tag to message
  //     group: "group", // (optional) add group to message
  //     ongoing: false, // (optional) set whether this is an "ongoing" notification

  //     /* iOS only properties */
  //     alertAction: 'view', // (optional) default: view
  //     category: null, // (optional) default: null
  //     userInfo: null, // (optional) default: null (object containing additional notification data)

  //     /* iOS and Android properties */
  //     title: "Scheduled Notification", // (optional)
  //     message: "My Notification Message", // (required)
  //     playSound: true, // (optional) default: true
  //     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  //   });
  // }

  // cancelNotif() {
  //   PushNotification.cancelLocalNotifications({id: ''+this.lastId});
  // }

  // cancelAll() {
  //   PushNotification.cancelAllLocalNotifications();
  // }
}

export default NotifService;